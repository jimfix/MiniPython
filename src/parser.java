
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\074\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\025\003\000\002\025\004\000\002\024\010" +
    "\000\002\024\011\000\002\014\004\000\002\014\005\000" +
    "\002\004\003\000\002\004\004\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\005\005\000\002\012\011\000\002\013\006" +
    "\000\002\011\003\000\002\011\004\000\002\006\005\000" +
    "\002\006\006\000\002\016\003\000\002\016\005\000\002" +
    "\015\004\000\002\015\005\000\002\015\004\000\002\015" +
    "\006\000\002\015\005\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\005\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\020\003\000" +
    "\002\020\003\000\002\021\004\000\002\021\004\000\002" +
    "\010\003\000\002\010\004\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\137\000\006\011\004\024\010\001\002\000\020\005" +
    "\036\006\033\012\044\021\034\023\027\025\042\052\037" +
    "\001\002\000\004\002\025\001\002\000\004\011\004\001" +
    "\002\000\006\011\ufffe\024\010\001\002\000\004\052\012" +
    "\001\002\000\004\002\uffff\001\002\000\004\007\013\001" +
    "\002\000\004\010\014\001\002\000\004\020\021\001\002" +
    "\000\004\010\016\001\002\000\004\020\017\001\002\000" +
    "\004\011\004\001\002\000\006\011\ufffb\024\ufffb\001\002" +
    "\000\004\011\004\001\002\000\006\011\ufffc\024\ufffc\001" +
    "\002\000\004\011\ufffd\001\002\000\004\002\000\001\002" +
    "\000\004\002\001\001\002\000\004\007\136\001\002\000" +
    "\030\005\036\006\033\007\062\026\050\030\046\044\060" +
    "\047\053\050\052\051\054\052\056\053\051\001\002\000" +
    "\020\005\ufff6\006\ufff6\012\ufff6\021\ufff6\023\ufff6\025\ufff6" +
    "\052\ufff6\001\002\000\020\005\ufff2\006\ufff2\012\ufff2\021" +
    "\ufff2\023\ufff2\025\ufff2\052\ufff2\001\002\000\006\004\131" +
    "\015\076\001\002\000\064\005\uffca\006\uffca\007\uffca\010" +
    "\uffca\012\uffca\015\uffca\017\uffca\020\uffca\021\uffca\023\uffca" +
    "\025\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034" +
    "\uffca\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca" +
    "\043\uffca\052\uffca\001\002\000\030\005\036\006\033\007" +
    "\062\026\050\030\046\044\060\047\053\050\052\051\054" +
    "\052\056\053\051\001\002\000\020\005\036\006\033\012" +
    "\ufff8\021\034\023\027\025\042\052\037\001\002\000\064" +
    "\005\uffcb\006\uffcb\007\uffcb\010\uffcb\012\uffcb\015\uffcb\017" +
    "\uffcb\020\uffcb\021\uffcb\023\uffcb\025\uffcb\027\uffcb\030\uffcb" +
    "\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037" +
    "\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\052\uffcb\001\002" +
    "\000\010\004\uffce\007\uffcc\015\uffce\001\002\000\004\012" +
    "\120\001\002\000\020\005\ufff4\006\ufff4\012\ufff4\021\ufff4" +
    "\023\ufff4\025\ufff4\052\ufff4\001\002\000\040\005\036\006" +
    "\033\007\062\012\uffee\021\uffee\023\uffee\025\uffee\026\050" +
    "\030\046\044\060\047\053\050\052\051\054\052\056\053" +
    "\051\001\002\000\020\005\ufff5\006\ufff5\012\ufff5\021\ufff5" +
    "\023\ufff5\025\ufff5\052\ufff5\001\002\000\030\002\ufffa\005" +
    "\ufffa\006\ufffa\011\ufffa\012\ufffa\021\ufffa\022\ufffa\023\ufffa" +
    "\024\ufffa\025\ufffa\052\ufffa\001\002\000\020\005\ufff3\006" +
    "\ufff3\012\ufff3\021\ufff3\023\ufff3\025\ufff3\052\ufff3\001\002" +
    "\000\030\005\uffd2\006\uffd2\007\uffd2\026\uffd2\030\uffd2\044" +
    "\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\001\002" +
    "\000\064\005\uffe1\006\uffe1\007\111\010\uffe1\012\uffe1\015" +
    "\uffe1\017\uffe1\020\uffe1\021\uffe1\023\uffe1\025\uffe1\027\uffe1" +
    "\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036" +
    "\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\052\uffe1" +
    "\001\002\000\062\005\uffe2\006\uffe2\010\uffe2\012\uffe2\015" +
    "\uffe2\017\uffe2\020\uffe2\021\uffe2\023\uffe2\025\uffe2\027\uffe2" +
    "\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036" +
    "\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\052\uffe2" +
    "\001\002\000\062\005\uffc6\006\uffc6\010\uffc6\012\uffc6\015" +
    "\uffc6\017\uffc6\020\uffc6\021\uffc6\023\uffc6\025\uffc6\027\uffc6" +
    "\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036" +
    "\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\052\uffc6" +
    "\001\002\000\062\005\uffc8\006\uffc8\010\uffc8\012\uffc8\015" +
    "\uffc8\017\uffc8\020\uffc8\021\uffc8\023\uffc8\025\uffc8\027\uffc8" +
    "\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036" +
    "\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\052\uffc8" +
    "\001\002\000\062\005\uffc9\006\uffc9\010\uffc9\012\uffc9\015" +
    "\uffc9\017\uffc9\020\uffc9\021\uffc9\023\uffc9\025\uffc9\027\uffc9" +
    "\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036" +
    "\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\052\uffc9" +
    "\001\002\000\062\005\uffc7\006\uffc7\010\uffc7\012\uffc7\015" +
    "\uffc7\017\uffc7\020\uffc7\021\uffc7\023\uffc7\025\uffc7\027\uffc7" +
    "\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036" +
    "\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\052\uffc7" +
    "\001\002\000\054\005\uffed\006\uffed\012\uffed\015\076\021" +
    "\uffed\023\uffed\025\uffed\027\071\030\064\031\066\032\075" +
    "\033\067\034\100\035\074\036\104\037\102\040\072\041" +
    "\070\042\065\043\103\052\uffed\001\002\000\064\005\uffcc" +
    "\006\uffcc\007\uffcc\010\uffcc\012\uffcc\015\uffcc\017\uffcc\020" +
    "\uffcc\021\uffcc\023\uffcc\025\uffcc\027\uffcc\030\uffcc\031\uffcc" +
    "\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040" +
    "\uffcc\041\uffcc\042\uffcc\043\uffcc\052\uffcc\001\002\000\062" +
    "\005\uffe3\006\uffe3\010\uffe3\012\uffe3\015\uffe3\017\uffe3\020" +
    "\uffe3\021\uffe3\023\uffe3\025\uffe3\027\uffe3\030\uffe3\031\uffe3" +
    "\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040" +
    "\uffe3\041\uffe3\042\uffe3\043\uffe3\052\uffe3\001\002\000\030" +
    "\005\uffd1\006\uffd1\007\uffd1\026\uffd1\030\uffd1\044\uffd1\047" +
    "\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1\001\002\000\030" +
    "\005\036\006\033\007\062\026\050\030\046\044\060\047" +
    "\053\050\052\051\054\052\056\053\051\001\002\000\030" +
    "\005\036\006\033\007\062\026\050\030\046\044\060\047" +
    "\053\050\052\051\054\052\056\053\051\001\002\000\040" +
    "\010\077\015\076\027\071\030\064\031\066\032\075\033" +
    "\067\034\100\035\074\036\104\037\102\040\072\041\070" +
    "\042\065\043\103\001\002\000\030\005\uffdc\006\uffdc\007" +
    "\uffdc\026\uffdc\030\uffdc\044\uffdc\047\uffdc\050\uffdc\051\uffdc" +
    "\052\uffdc\053\uffdc\001\002\000\030\005\uffdf\006\uffdf\007" +
    "\uffdf\026\uffdf\030\uffdf\044\uffdf\047\uffdf\050\uffdf\051\uffdf" +
    "\052\uffdf\053\uffdf\001\002\000\030\005\uffdb\006\uffdb\007" +
    "\uffdb\026\uffdb\030\uffdb\044\uffdb\047\uffdb\050\uffdb\051\uffdb" +
    "\052\uffdb\053\uffdb\001\002\000\030\005\uffd9\006\uffd9\007" +
    "\uffd9\026\uffd9\030\uffd9\044\uffd9\047\uffd9\050\uffd9\051\uffd9" +
    "\052\uffd9\053\uffd9\001\002\000\030\005\uffd5\006\uffd5\007" +
    "\uffd5\026\uffd5\030\uffd5\044\uffd5\047\uffd5\050\uffd5\051\uffd5" +
    "\052\uffd5\053\uffd5\001\002\000\030\005\uffdd\006\uffdd\007" +
    "\uffdd\026\uffdd\030\uffdd\044\uffdd\047\uffdd\050\uffdd\051\uffdd" +
    "\052\uffdd\053\uffdd\001\002\000\030\005\uffd6\006\uffd6\007" +
    "\uffd6\026\uffd6\030\uffd6\044\uffd6\047\uffd6\050\uffd6\051\uffd6" +
    "\052\uffd6\053\uffd6\001\002\000\030\005\036\006\033\007" +
    "\062\026\050\030\046\044\060\047\053\050\052\051\054" +
    "\052\056\053\051\001\002\000\030\005\uffd7\006\uffd7\007" +
    "\uffd7\026\uffd7\030\uffd7\044\uffd7\047\uffd7\050\uffd7\051\uffd7" +
    "\052\uffd7\053\uffd7\001\002\000\030\005\uffda\006\uffda\007" +
    "\uffda\026\uffda\030\uffda\044\uffda\047\uffda\050\uffda\051\uffda" +
    "\052\uffda\053\uffda\001\002\000\006\045\105\046\106\001" +
    "\002\000\062\005\uffe0\006\uffe0\010\uffe0\012\uffe0\015\uffe0" +
    "\017\uffe0\020\uffe0\021\uffe0\023\uffe0\025\uffe0\027\uffe0\030" +
    "\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0" +
    "\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\052\uffe0\001" +
    "\002\000\030\005\uffd8\006\uffd8\007\uffd8\026\uffd8\030\uffd8" +
    "\044\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8\001" +
    "\002\000\062\005\uffe8\006\uffe8\010\uffe8\012\uffe8\015\uffe8" +
    "\017\uffe8\020\uffe8\021\uffe8\023\uffe8\025\uffe8\027\uffe8\030" +
    "\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8" +
    "\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\052\uffe8\001" +
    "\002\000\030\005\uffd4\006\uffd4\007\uffd4\026\uffd4\030\uffd4" +
    "\044\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\001" +
    "\002\000\030\005\uffde\006\uffde\007\uffde\026\uffde\030\uffde" +
    "\044\uffde\047\uffde\050\uffde\051\uffde\052\uffde\053\uffde\001" +
    "\002\000\030\005\uffd3\006\uffd3\007\uffd3\026\uffd3\030\uffd3" +
    "\044\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3\001" +
    "\002\000\064\004\uffd0\005\uffd0\006\uffd0\010\uffd0\012\uffd0" +
    "\015\uffd0\017\uffd0\020\uffd0\021\uffd0\023\uffd0\025\uffd0\027" +
    "\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0" +
    "\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\052" +
    "\uffd0\001\002\000\064\004\uffcf\005\uffcf\006\uffcf\010\uffcf" +
    "\012\uffcf\015\uffcf\017\uffcf\020\uffcf\021\uffcf\023\uffcf\025" +
    "\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf" +
    "\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043" +
    "\uffcf\052\uffcf\001\002\000\062\005\uffe7\006\uffe7\010\uffe7" +
    "\012\uffe7\015\076\017\uffe7\020\uffe7\021\uffe7\023\uffe7\025" +
    "\uffe7\027\071\030\064\031\066\032\075\033\067\034\100" +
    "\035\074\036\104\037\102\040\072\041\070\042\065\043" +
    "\103\052\uffe7\001\002\000\062\005\uffe6\006\uffe6\010\uffe6" +
    "\012\uffe6\015\076\017\uffe6\020\uffe6\021\uffe6\023\uffe6\025" +
    "\uffe6\027\071\030\064\031\066\032\075\033\067\034\100" +
    "\035\074\036\104\037\102\040\072\041\070\042\065\043" +
    "\103\052\uffe6\001\002\000\032\005\036\006\033\007\062" +
    "\010\113\026\050\030\046\044\060\047\053\050\052\051" +
    "\054\052\056\053\051\001\002\000\042\010\uffea\015\076" +
    "\017\116\027\071\030\064\031\066\032\075\033\067\034" +
    "\100\035\074\036\104\037\102\040\072\041\070\042\065" +
    "\043\103\001\002\000\062\005\uffe4\006\uffe4\010\uffe4\012" +
    "\uffe4\015\uffe4\017\uffe4\020\uffe4\021\uffe4\023\uffe4\025\uffe4" +
    "\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035" +
    "\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4" +
    "\052\uffe4\001\002\000\004\010\115\001\002\000\062\005" +
    "\uffe5\006\uffe5\010\uffe5\012\uffe5\015\uffe5\017\uffe5\020\uffe5" +
    "\021\uffe5\023\uffe5\025\uffe5\027\uffe5\030\uffe5\031\uffe5\032" +
    "\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5" +
    "\041\uffe5\042\uffe5\043\uffe5\052\uffe5\001\002\000\030\005" +
    "\036\006\033\007\062\026\050\030\046\044\060\047\053" +
    "\050\052\051\054\052\056\053\051\001\002\000\004\010" +
    "\uffe9\001\002\000\030\002\ufff9\005\ufff9\006\ufff9\011\ufff9" +
    "\012\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\052" +
    "\ufff9\001\002\000\004\012\ufff7\001\002\000\040\015\076" +
    "\020\123\027\071\030\064\031\066\032\075\033\067\034" +
    "\100\035\074\036\104\037\102\040\072\041\070\042\065" +
    "\043\103\001\002\000\004\011\004\001\002\000\004\022" +
    "\125\001\002\000\004\020\126\001\002\000\004\011\004" +
    "\001\002\000\020\005\ufff0\006\ufff0\012\ufff0\021\ufff0\023" +
    "\ufff0\025\ufff0\052\ufff0\001\002\000\006\004\uffcd\015\uffcd" +
    "\001\002\000\030\005\036\006\033\007\062\026\050\030" +
    "\046\044\060\047\053\050\052\051\054\052\056\053\051" +
    "\001\002\000\054\005\ufff1\006\ufff1\012\ufff1\015\076\021" +
    "\ufff1\023\ufff1\025\ufff1\027\071\030\064\031\066\032\075" +
    "\033\067\034\100\035\074\036\104\037\102\040\072\041" +
    "\070\042\065\043\103\052\ufff1\001\002\000\040\015\076" +
    "\020\134\027\071\030\064\031\066\032\075\033\067\034" +
    "\100\035\074\036\104\037\102\040\072\041\070\042\065" +
    "\043\103\001\002\000\004\011\004\001\002\000\020\005" +
    "\uffef\006\uffef\012\uffef\021\uffef\023\uffef\025\uffef\052\uffef" +
    "\001\002\000\032\005\036\006\033\007\062\010\137\026" +
    "\050\030\046\044\060\047\053\050\052\051\054\052\056" +
    "\053\051\001\002\000\020\005\uffec\006\uffec\012\uffec\021" +
    "\uffec\023\uffec\025\uffec\052\uffec\001\002\000\004\010\141" +
    "\001\002\000\020\005\uffeb\006\uffeb\012\uffeb\021\uffeb\023" +
    "\uffeb\025\uffeb\052\uffeb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\137\000\012\002\004\014\010\024\006\025\005\001" +
    "\001\000\024\003\034\004\037\005\027\006\030\010\031" +
    "\011\044\012\042\013\040\022\025\001\001\000\002\001" +
    "\001\000\004\014\023\001\001\000\006\024\006\025\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\017\001\001\000" +
    "\002\001\001\000\004\014\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\007\056\015\132\020\060\022\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\127\001\001\000\002\001\001\000\012\007\056\015\121" +
    "\020\060\022\046\001\001\000\024\003\034\004\120\005" +
    "\027\006\030\010\031\011\044\012\042\013\040\022\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\007\056\015\054\020\060" +
    "\022\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\017\072\021\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\007\056\015\107\020\060\022\046\001\001\000\012" +
    "\007\056\015\062\020\060\022\046\001\001\000\006\017" +
    "\072\021\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\007\056\015\106" +
    "\020\060\022\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\017\072\021\100\001\001\000\006\017\072\021\100\001" +
    "\001\000\014\007\056\015\111\016\113\020\060\022\046" +
    "\001\001\000\006\017\072\021\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\007\056" +
    "\015\111\016\116\020\060\022\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\072" +
    "\021\100\001\001\000\004\014\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\007\056\015\131\020" +
    "\060\022\046\001\001\000\006\017\072\021\100\001\001" +
    "\000\006\017\072\021\100\001\001\000\004\014\134\001" +
    "\001\000\002\001\001\000\014\007\056\015\111\016\137" +
    "\020\060\022\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
  public void report_error(String message, Object info) {
    StringBuilder m = new StringBuilder("Error ");

    if (info instanceof java_cup.runtime.Symbol) 
      m.append( "("+info.toString()+")" );
     
    m.append(" : "+message);
   
    System.out.println(m);
  }
   
  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    throw new RuntimeException("Fatal Syntax Error");
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= definition_list block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // definition_list ::= definition 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definition_list",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // definition_list ::= definition definition_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definition_list",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // definition ::= DEF IDENTIFIER LPAREN RPAREN COLON block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definition",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // definition ::= DEF IDENTIFIER LPAREN name_list RPAREN COLON block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definition",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // block ::= LBRACE RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // block ::= LBRACE statement_list RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement_list ::= statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement_list ::= statement statement_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= assignment 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= if_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= while_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= return_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= call_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // assignment ::= lhs ASSIGN expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // if_statement ::= IF expression COLON block ELSE COLON block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // while_statement ::= WHILE expression COLON block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // return_statement ::= RETURN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // return_statement ::= RETURN expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // call_statement ::= name LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_statement",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // call_statement ::= name LPAREN expression_list RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_statement",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expression_list ::= expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expression_list ::= expression COMMA expression_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expression ::= expression postfix 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expression ::= expression binop expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expression ::= unop expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression ::= name LPAREN expression_list RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression ::= name LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression ::= literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= NEW 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= name 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // binop ::= AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // binop ::= OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // binop ::= PLUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // binop ::= MINUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // binop ::= MULT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // binop ::= DIV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // binop ::= MOD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // binop ::= LT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // binop ::= GT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // binop ::= EQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // binop ::= NEQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // binop ::= GEQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // binop ::= LEQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // unop ::= MINUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unop",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // unop ::= NOT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unop",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // postfix ::= DOT LEFT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // postfix ::= DOT RIGHT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // lhs ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lhs",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // lhs ::= lhs postfix 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lhs",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // name ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("name",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // name ::= PRINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("name",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // name ::= INPUT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("name",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // literal ::= INT_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // literal ::= BOOL_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // literal ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // literal ::= NONE_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
