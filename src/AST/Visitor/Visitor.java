package AST.Visitor;

import AST.And;
import AST.Assign;
import AST.Block;
import AST.FunCall;
import AST.Defn;
import AST.Div;
import AST.Equals;
import AST.False;
import AST.Formal;
import AST.GreaterEquals;
import AST.GreaterThan;
import AST.Identifier;
import AST.IdentifierExp;
import AST.IdentifierType;
import AST.If;
import AST.IntegerLiteral;
import AST.LessEquals;
import AST.LessThan;
import AST.Minus;
import AST.Mod;
import AST.Not;
import AST.NotEquals;
import AST.Or;
import AST.Plus;
import AST.Print;
import AST.Program;
import AST.Return;
import AST.StringLiteral;
import AST.Times;
import AST.True;
import AST.While;

public interface Visitor < T, C > {
	T visit(Program n, C e);
	T visit(Defn n, C e);
	T visit(Formal n, Env e);
	T visit(Block n, Env e);
	T visit(If n, Env e);
	T visit(While n, Env e);
	T visit(Print n, Env e);
	T visit(Return n, Env e);
	T visit(Assign n, Env e);
	T visit(And n, Env e);
	T visit(Or n, Env e);
	T visit(GreaterThan n, Env e);
	T visit(LessThan n, Env e);
	T visit(Equals n, Env e);
	T visit(NotEquals n, Env e);
	T visit(GreaterEquals n, Env e);
	T visit(LessEquals n, Env e);
	T visit(Plus n, Env e);
	T visit(Minus n, Env e);
	T visit(Times n, Env e);
	T visit(Div n, Env e);
	T visit(Mod n, Env e);
	T visit(FunCall n, Env e);
	T visit(IntegerLiteral n, Env e);
	T visit(IdentifierType n, Env e);
	T visit(StringLiteral n, Env e);
	T visit(True n, Env e);
	T visit(False n, Env e);
	T visit(IdentifierExp n, Env e);
	T visit(Not n, Env e);
	T visit(Identifier n, Env e);
}
