import java_cup.runtime.*;

/*
   September 2015 - changed considerably to work with a limited Python syntax
                    (authors: Jeremy Cosel and James Fix)
 */

/* MiniPython3 parser for CUP.  
 * Copyright (C) 2015 Jeremy Cosel (jcosel@reed.edu)
 * Modified from the Java 1.2 parser for CUP which had this copyright:
 *    Copyright (C) 1998 C. Scott Ananian <cananian@alumni.princeton.edu>
 *    This program is released under the terms of the GPL; see the file
 *    COPYING for more details.  There is NO WARRANTY on this code.
 */

parser code  {: 
  public void report_error(String message, Object info) {
    StringBuilder m = new StringBuilder("Error ");

    if (info instanceof java_cup.runtime.Symbol) 
      m.append( "("+info.toString()+")" );
     
    m.append(" : "+message);
   
    System.out.println(m);
  }
   
  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    throw new RuntimeException("Fatal Syntax Error");
  }
:};

// Terminals

terminal ASSIGN;                       // assignment keyword
terminal PRINT;
terminal INPUT;
terminal LPAREN, RPAREN;
terminal LBRACE, RBRACE;
terminal LBRACK, RBRACK;               // array index or type annotation
terminal DOT;                          // field selector
terminal SEMICOLON, COMMA, COLON;      // separators
terminal IF, ELSE;                     // conditional statement keywords
terminal WHILE;                        // loop keyword
terminal DEF;                          // definition keyword
terminal RETURN;                       // return keyword
terminal NEW;                          // creation keyword
terminal PLUS, MINUS, MULT, DIV, MOD;  // arithmetic
terminal LT, GT, LEQ, GEQ;             // comparators
terminal EQ, NEQ;                      // equality
terminal AND, OR, NOT;                 // logical connectives
terminal LEFT, RIGHT;                  // pair access

terminal java.lang.Number INT_LITERAL;
terminal java.lang.Boolean BOOL_LITERAL;
terminal java.lang.String STRING_LITERAL;
terminal java.lang.String IDENTIFIER;     // names
terminal NONE_LITERAL;

// Variables

non terminal program;
non terminal statement, statement_list;
non terminal assignment;
non terminal call_statement;
non terminal literal;
non terminal lhs;
non terminal return_statement;
non terminal if_statement;
non terminal while_statement;
non terminal block;
non terminal expression, expression_list;
non terminal binop;
non terminal unop;
non terminal postfix;
non terminal name, name_list;
non terminal definition, definition_list;

start with program;

// 19.2) The Syntactic Grammar
program	::= definition_list block
    | block
	;

definition_list ::= definition
    |   definition definition_list
    ;

definition ::= DEF IDENTIFIER LPAREN RPAREN COLON block
    |   DEF IDENTIFIER LPAREN name_list RPAREN COLON block
    ;

block ::= LBRACE RBRACE
    |   LBRACE statement_list RBRACE
    ;

statement_list ::= statement statement_list
    |   statement
    ;

statement ::= assignment
    |   if_statement
    |   while_statement
    |   return_statement
    |   call_statement
    ;

assignment ::= lhs ASSIGN expression;

if_statement ::= IF expression COLON block ELSE COLON block;

while_statement ::= WHILE expression COLON block;

return_statement ::= RETURN expression
    |   RETURN
    ;

call_statement ::= name LPAREN expression_list RPAREN
    |   name LPAREN RPAREN
    ;

expression_list ::= expression COMMA expression_list
    |   expression
    ;

expression ::= expression postfix
    |   expression binop expression
    |   unop expression
    |   name LPAREN expression_list RPAREN
    |   name LPAREN RPAREN
    |   literal
    |   NEW
    |   name
    |   LPAREN expression RPAREN
    ;

binop ::= AND
    |   OR
    |   PLUS
    |   MINUS
    |   MULT
    |   DIV
    |   MOD
    |   LT
    |   GT
    |   EQ
    |   NEQ
    |   GEQ
    |   LEQ
    ;

unop ::= MINUS
    |   NOT
    ;

postfix ::= DOT LEFT
    |   DOT RIGHT
    ;

lhs ::= IDENTIFIER
    |   lhs postfix
    ;

name ::= IDENTIFIER
    |   PRINT
    |   INPUT
    ;

literal ::=	INT_LITERAL
	|	BOOL_LITERAL
	|	STRING_LITERAL
	|	NONE_LITERAL
	;
